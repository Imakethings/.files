# New prototype.
snippet prototype
	${1:class_name}.prototype.${2:method_name} = function(${3}){
		${0}
	};

# New prototype when bound to 'fn'.
snippet fn
	${1:class_name}.fn.${2:method_name} = function(${3}){
		${0}
	};

snippet self
	var self = this;

# Function.
# Notice the extra 'n' to indicate a 'name'.
snippet functionn
	function ${1:function_name}(${2}){
		${0}
	}
	
# Anonymous Function.
snippet function
	function(${1}){
		${0}
	}

# Function assigned to variable
snippet varfunction
	var ${1:function_name} = function $1(${2}) 
	{
		${0}
	};

# Immediate function, for self calling.
snippet (function)
	(function(${1}) {
		${0}
	}(${2}));

# if
snippet if
	if (${1:true}) {
		${0}
	}

# if ... else
snippet ifelse
	if (${1:true}) {
		${2}
	} else {
		${0}
	}

# Tertiary conditional. 
snippet short
	${1:/* Condition. */} ? ${2:a} : ${0:b}

# Switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		
		${0}
		
		default:
			${2}
	}

# Case
snippet case
	case '${1:case}':
		${2}
		break;
	${0}

# for (...) {...}
snippet for
	for(var ${1:i} = ${2:0}; ${1:i} < ${3:10}; ${1:i}++) {
		${0}
	}

# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:array}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${0:}
	}

# while (...) {...}
snippet while
	while (${1:/* condition */}) {
		${0}
	}

# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${0:/* handle error */}
	}

# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0}
	}${3:,}

# querySelector a single element.
snippet query
	${1:element}.querySelector('${2:name}').${0}

# querySelectorAll.
snippet queryall
	${1:element}.querySelectorAll('${2:name}').${0}

# console.log (Firebug)
snippet cl
	console.log(${0});

# console.debug (Firebug)
snippet cd
	console.debug(${0});

# return
snippet return
	return ${0:result}

# for (property in object ) { ... }
snippet in
	for (var ${1:key} in ${2:object}) {
		${0:$2[$1]}
	}

# JSDoc(string)
snippet /**
	/**
	 * ${0}
	 *
	 */
snippet @desc
	@description - ${0} 
snippet @param
	@param {${1:type}} ${2:name} ${0:description}
snippet @return
	@return {${1:type}} ${0:description}
snippet @type
	@type {${1:type}}

# Define multiple properties
snippet properties
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
# Define a single property
snippet property
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
