#! /bin/sh
# Daemon-notify
# Copyright (C) 2015 Mirko van der Waal <mvdw at airmail dot cc>
# Distributed under terms of the GNU2 license.
# A simple root-daemon watcher that notifies you upon change (start, stop).

if ! flags=$(getopt -o usqh -l status,start,stop,help -- "$@")
then
    exit 1
fi

set -- $flags

__status=false
__start=false
__stop=false

while [ $# -gt 0 ]; do
    case $1 in
    -u|--status) __status=true ;;
    -s|--start) __start=true ;;
    -q|--stop) __stop=true ;;
    -h|--help) echo "
$(tput bold)NAME$(tput sgr0)
    Daemon-notify - Does what is says and says what it does.

$(tput bold)AUTHOR$(tput sgr0)
    Written by Mirko van der Waal <mvdw at airmail dot cc>

$(tput bold)FLAGS$(tput sgr0)
    $(tput bold)-u, --status$(tput sgr0)
        Receive the current status if it is running and which PID it 
        occupies or if it isn't running.

    $(tput bold)-s, --start$(tput sgr0)
        Start the daemon only when no other active process is currently found.
        Merely to prevent shadowing a already exisiting one and this way
        duplicating your CPU and therefor your notifications.

    $(tput bold)-q, --stop$(tput sgr0)
        Kill the daemon (and IF existant all his shadow processes).

    $(tput bold)-h, --help$(tput sgr0)
        You're looking at it.
    "; exit 0 ;;
    
    # Mostly catching and leaves default.
    (--) shift; break;;
    (-*) echo "$0: unrecognized option $1" 1>&2; exit 1;;
     (*) break;;
    esac
    shift
done

if  [[ $__status = true ]]; then
    # When there are 1 or more processes caught. This is required due to
    # an extra process when the --status check is ran.
    if  [[ $(ps -A | grep daemon-notify | wc -l) -ne 2 ]]; then
        PID=$(ps -A | grep daemon-notify | awk '{print $1}' | head -n1)
        echo "State: active (on: $PID)"
    else
        echo "State: not active"
    fi
    exit 0
fi

if  [[ $__start = true && $(ps -A | grep daemon-notify | wc -l) -le 3 ]]; then
    $($0 &) &
    exit 0
fi

if  [[ $__stop = true && $(ps -A | grep daemon-notify | wc -l) -gt 2 ]]; then
    kill -9 $(ps -A | grep daemon-notify | awk '{print $1}') > /dev/null 2>&1
    exit 0
fi

GET_DAEMONS(){
    # Get the current running root deamons.
    DAEMONS=($(ps -ef | awk '$3 == 1' | \
                        grep root | \
                        cut -d\: -f3- | \
                        sed 's/[0-9][0-9] //g' | \
                        sed 's/ /_/g'))
    echo "${DAEMONS[@]}"
}

# Initialise the deamons.
OLD=$(GET_DAEMONS)
NEW=$(GET_DAEMONS)

while true; do
    if [[ ${#OLD} -ne ${#NEW} ]]; then 
        DAEMON=$(echo ${OLD[@]} ${NEW[@]} | tr ' ' '\n' | sort | uniq -u | \
                 sed 's/_/ /g' | sed 's/[0-9][0-9]://g')

        if   [[ ${#OLD} -gt ${#NEW} ]]; then 
            naughty-notify --timeout 10 --preset low --title "An daemon has stopped" "$DAEMON"
        elif [[ ${#OLD} -lt ${#NEW} ]]; then 
            naughty-notify --timeout 10 --preset low --title "An daemon has started" "$DAEMON"
        fi

        OLD=$(GET_DAEMONS)
    fi
    NEW=$(GET_DAEMONS)
    sleep .5
done
