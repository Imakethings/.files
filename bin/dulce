#!/usr/bin/env sh
# Copyright (C) 2015 Mirko van der Waal <mvdw at airmail dot cc>
# Distributed under terms of the GNU2 license.

SHORT="cpla:r:h"
LONG="construct,list,pull,clone,add:,remove:,help"
OPTIONS=$(getopt -o $(echo $SHORT) \
                 -l $(echo $LONG) \
                 -n "$0" \
                 -- "$@")

VIM=$HOME/.vim
BUNDLE=$VIM/bundle
GITHUB=https://github.com
# Ensure that the file exists before catting it.
[[ -e /$VIM/plugins.conf ]] && PLUGINS=($(cat $VIM/plugins.conf))

CONSTRUCT() {
    for DIRECTORY in $1/*; do
        NEW="$NEW https://$(cat $DIRECTORY/.git/config | \
             grep url | \
             sed 's/:\/\// /g' | \
             sed 's/.git$//g' | \
             awk '{print $(NF)}')"
    done
    if [[ -e $VIM/plugins.conf ]]; then
        read -p "$VIM/plugins.conf already exists, overwrite? [Y/n] " VAR
        if [[ $(echo $VAR | awk '{print toupper($0)}') =~ "Y" ]]; then
            echo $NEW | sed "s/ /\\`echo -e '\n\r'`/g" > $VIM/plugins.conf
            echo "Successfully constructed $VIM/plugins.conf"
            exit 0
        else
            echo "Did nothing."
            exit 0
        fi
    else
        echo $NEW | sed "s/ /\\`echo -e '\n\r'`/g" > $VIM/plugins.conf
        echo "Successfully constructed $VIM/plugins.conf"
        exit 0
    fi
    exit 0
}

CLONE() {
    for PLUGIN in ${PLUGINS[@]}; do
        NAME=$(echo $PLUGIN | sed 's/\// /g' | awk '{print $(NF)}')
        COUNTER=0
        if [[ ! $(ls $BUNDLE) =~ $NAME ]]; then
            echo "Found: $NAME"
            git clone $PLUGIN $BUNDLE/$NAME
            let COUNTER++
        fi
    done
    if [[ $COUNTER -eq 0 ]]; then
        echo "Nothing new."
        exit 0
    fi
    exit 0
}

PULL() {
    for PLUGIN in $BUNDLE/*; do
        if [[ -d $PLUGIN/.git ]]; then
            cd $PLUGIN
            echo -e "$PLUGIN $([[ $(echo $PLUGIN | wc -c) -gt 40 ]] && \
                                    echo -e "\t" || \
                                    echo -e "\t\t")$(git pull)"
        fi
    done
    exit 0
}

ADD() {
    # Does the URL actually exist?
    if curl -o /dev/null --silent --head --fail "$GITHUB/$1"; then
        # Catch some errors where you wouldn't specify a repository.
        # Not 100% bulletproof but assuming you aren't retarded this should be
        # fine.
        if [[ ! $(echo $1 | sed 's/[^/]//g') || \
                $(echo $1 | sed 's/[^/]//g'  | wc -c) -gt 2 ]]; then
            echo "Not a valid repository"
            exit 1
        fi
        # Aren't you already watching the plugin?
        for PLUGIN in ${PLUGINS[@]}; do
            if [[ $GITHUB/$1 == $PLUGIN ]]; then
                echo "You're already watching this plugin"
                exit 1
            fi
        done
        # Actually add it now and throw some feedback.
        echo $GITHUB/$1 >> $VIM/plugins.conf
        echo "Now watching: $GITHUB/$1"
        exit 0
    else
        echo "Not a valid repository"
        exit 1
    fi
    exit 0
}

REMOVE() {
    echo "Looking for matches..." 
    for PLUGIN in ${PLUGINS[@]}; do
        # If the plugin is found within the file.
        if [[ $(echo $PLUGIN | awk '{print tolower($0)}') \
           =~ $(echo $1 | awk '{print tolower($0)}') ]]; then
            # Created a spaced string that can be converted to an array later.
            RMN="$RMN $(echo $PLUGIN | sed 's/\// /g' | awk '{print $(NF)}')"
        fi
    done
    RMN=($RMN)
    if [[ ${#RMN} -eq 0 ]]; then
        echo "No matches found."
        exit 0
    fi
    echo "Plugins (${#RMN[@]}): ${RMN[@]}"
    read -p " :: Continue removal? [Y/n] " VAR
    if [[ $(echo $VAR | awk '{print toupper($0)}') =~ "Y" ]]; then
        for PLUGIN in ${RMN[@]}; do
            echo "Removing: $PLUGIN"
            rm -r -f $BUNDLE/$PLUGIN
            sed -i "/$(echo $PLUGIN | sed 's/\//\\\//g')/d" $VIM/plugins.conf 
        done
        echo "Removal successful."
        exit 0
    else
        echo "Bye!"
        exit 0
    fi
    exit 0
}

LIST() {
    echo "Found (${#PLUGINS[@]}) plugins." 
    for PLUGIN in ${PLUGINS[@]}; do
        echo $PLUGIN
    done
}

while true; do
    case "$1" in
        --construct) 
            CONSTRUCT $BUNDLE
            break ;;
        -r|--remove) 
            REMOVE $2
            shift 2 ;;
        -a|--add)   
            ADD $2
            shift 2 ;;
        -c|--clone)  
            CLONE        
            shift ;;
        -p|--pull)   
            PULL         
            shift ;;
        -l|--list)
            LIST
            break ;;
        -h|--help)
            echo "
$(tput bold)NAME$(tput sgr0)
    dulce - Vim plugin manager.

$(tput bold)SYNOPSIS$(tput sgr0)
    dulce $(tput bold)[options]$(tput sgr0)

$(tput bold)DESCRIPTION$(tput sgr0)
    Manage your vim plugins through a simple shell script. Dulce doesn't
    directly interact with vim making it easy to seperate the two. 
    You only manage the /bundle directory and have another vim plugins actually
    load the plugins (Pathogen).

$(tput bold)OPTIONS$(typut sgr0)
    $(tput bold)-a, --add $(tput sgr0;tput smul)[ARGUMENT...]$(tput sgr0)
        Add a new repository to the .conf file. This does not automatically 
        clone it yet. You will have to --clone before it becomes available.

    $(tput bold)-c, --clone$(tput sgr0)
        Clone all the not yet cloned repositories to the /bundle directory.
    
    $(tput bold)--construct$(tput sgr0)
        Construct a plugins.conf file from the existing plugins in /bundle.
        This is particularly useful when using dulce for this first time.

    $(tput bold)-h, --help$(tput sgr0)
        You're looking at it.

    $(tput bold)-l, --list$(tput sgr0)
        List the amount and all the currently used plugins. 

    $(tput bold)-p, --pull$(tput sgr0)
        Perform a pull request to the master branch of all the ALREADY cloned 
        repositories. 

    $(tput bold)-r, --remove $(tput sgr0;tput smul)[ARGUMENT...]$(tput sgr0)
        Remove all the repositories matching the expression. 

$(tput bold)AUTHOR$(tput sgr0)
    Mirko van der Waal

$(tput bold)CONTACT$(tput sgr0)
    <$(tput bold)mvdw at airmail dot cc$(tput sgr0)>
            "
            exit  ;;
        --) shift 
            break ;;
        * ) break ;;
    esac
done
